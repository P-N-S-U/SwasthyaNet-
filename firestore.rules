rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles (needed for patients to find doctors, and doctors to see patient details).
      // A user can create their own profile.
      // A user can only update their own profile.
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Disallow deleting user profiles
    }

    // Rules for the 'appointments' collection
    match /appointments/{appointmentId} {
      // A user can read an appointment if they are the patient or the doctor.
      allow read: if isSignedIn() && (request.auth.uid == resource.data.patientId || request.auth.uid == resource.data.doctorId);
      // Any authenticated user can create an appointment (patients book them).
      allow create: if isSignedIn();
      // Disallow updates and deletes for now to maintain record integrity.
      allow update, delete: if false;
    }

    // Rules for WebRTC signaling calls
    match /calls/{callId}/{document=**} {
      // Any authenticated user can create, read, update, and delete documents
      // in the 'calls' collection. This is required for WebRTC signaling to work
      // between the two peers (patient and doctor).
      allow read, write: if isSignedIn();
    }
  }
}
